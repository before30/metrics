###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################
# Telegraf Configuration
# Global tags can be specified here in key="value" format.
[global_tags]
  service = "myservice"
  role = "myrole"
  instance_id = "system"

# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "10s"
  ## Rounds collection interval to 'interval'
  round_interval = true
  ## This controls the size of writes that Telegraf sends to output plugins.
  metric_batch_size = 1000
  ## This buffer only fills when writes fail to output plugin(s).
  metric_buffer_limit = 10000
  ## Collection jitter is used to jitter the collection by a random amount.
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = ""

  ## Logging configuration:
  debug = true
  ## Run telegraf in quiet mode (error log messages only).
  quiet = false
  ## Specify the log file name. The empty string means to log to stderr.
  logfile = ""
  ## Override default hostname, if empty use os.Hostname()
  hostname = "i-instanceid0000"
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = false


###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################
#[[outputs.http]]
#  url = "http://graphite"
#  data_format = "graphite"
#  prefix = "hosts"
#  template = "service.role.host.instance_id.input_type.measurement.name.device.path.container_name.field"
[[outputs.graphite]]
  servers = ["graphite:2003"]
  prefix = "hosts"
  template = "service.role.host.instance_id.input_type.measurement.name.device.path.container_name.field"
#[[outputs.file]]
#  files = ["stdout", "/tmp/metrics.out"]
#  data_format = "graphite"
#  prefix = "hosts"
#  template = "service.role.host.instance_id.input_type.measurement.name.device.path.container_name.field"

#[outputs.http.headers]
#   # Should be set manually to "application/json" for json data_format
#  Content-Type = "application/json"

###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################

# # Statsd UDP/TCP Server
[[inputs.statsd]]
#   ## Protocol, must be "tcp", "udp", "udp4" or "udp6" (default=udp)
  protocol = "udp"
  #
  #   ## MaxTCPConnection - applicable when protocol is set to tcp (default=250)
  max_tcp_connections = 250
  #
  #   ## Address and port to host UDP listener on
  service_address = ":8125"
  #
  #   ## The following configuration options control when telegraf clears it's cache
  #   ## of previous values. If set to false, then telegraf will only clear it's
  #   ## cache when the daemon is restarted.
  #   ## Reset gauges every interval (default=true)
  delete_gauges = true
  #   ## Reset counters every interval (default=true)
  delete_counters = true
  #   ## Reset sets every interval (default=true)
  delete_sets = true
  #   ## Reset timings & histograms every interval (default=true)
  delete_timings = true
  #
  #   ## Percentiles to calculate for timing & histogram stats
  percentiles = [90]
  #
  #   ## separator to use between elements of a statsd metric
  metric_separator = "_"
  #
  #   ## Parses tags in the datadog statsd format
  #   ## http://docs.datadoghq.com/guides/dogstatsd/
  parse_data_dog_tags = false
  #   ## Number of UDP messages allowed to queue up, once filled,
  #   ## the statsd server will start dropping packets
  allowed_pending_messages = 10000
  #
  #   ## Number of timing/histogram values to track per-measurement in the
  #   ## calculation of percentiles. Raising this limit increases the accuracy
  #   ## of percentiles but also increases the memory usage and cpu time.
  percentile_limit = 1000

# Read metrics about cpu usage
[[inputs.cpu]]
  ## Whether to report per-cpu stats or not
  percpu = true
  ## Whether to report total system cpu stats or not
  totalcpu = true
  ## If true, collect raw CPU time metrics.
  collect_cpu_time = false
  ## If true, compute and report the sum of all non-idle CPU states.
  report_active = false


# Read metrics about disk usage by mount point
[[inputs.disk]]
## By default stats will be gathered for all mount points.
## Set mount_points will restrict the stats to only the specified mount points.
# mount_points = ["/"]

  ## Ignore mount points by filesystem type.
  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "overlay", "aufs", "squashfs"]


# Read metrics about disk IO by device
[[inputs.diskio]]
## By default, telegraf will gather stats for all devices including
## disk partitions.
## Setting devices will restrict the stats to the specified devices.
# devices = ["sda", "sdb", "vd*"]
## Uncomment the following line if you need disk serial numbers.
# skip_serial_number = false
#
## On systems which support it, device metadata can be added in the form of
## tags.
## Currently only Linux is supported via udev properties. You can view
## available properties for a device by running:
## 'udevadm info -q property -n /dev/sda'
# device_tags = ["ID_FS_TYPE", "ID_FS_USAGE"]
#
## Using the same metadata source as device_tags, you can also customize the
## name of the device via templates.
## The 'name_templates' parameter is a list of templates to try and apply to
## the device. The template may contain variables in the form of '$PROPERTY' or
## '${PROPERTY}'. The first template which does not contain any variables not
## present for the device is used as the device name tag.
## The typical use case is for LVM volumes, to get the VG/LV name instead of
## the near-meaningless DM-0 name.
# name_templates = ["$ID_FS_LABEL","$DM_VG_NAME/$DM_LV_NAME"]

# Get kernel statistics from /proc/stat
[[inputs.kernel]]
# no configuration


# Read metrics about memory usage
[[inputs.mem]]
# no configuration


# Get the number of processes and group them by status
[[inputs.processes]]
# no configuration


# Read metrics about swap memory usage
[[inputs.swap]]
# no configuration


# Read metrics about system load & uptime
[[inputs.system]]
# no configuration

# # This plugin implements the Zipkin http server to gather trace and timing data needed to troubleshoot latency problems in microservice architectures.
# [[inputs.zipkin]]
#   # path = "/api/v1/spans" # URL path for span data
#   # port = 9411            # Port on which Telegraf listens